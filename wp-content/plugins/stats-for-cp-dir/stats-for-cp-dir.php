<?php
/**
 * -----------------------------------------------------------------------------
 * Plugin Name: Stats for ClassicPress directory
 * Description: Stats for ClassicPress directory
 * Version: 0.1.0
 * Author: ClassicPress Contributors
 * Author URI: https://www.classicpress.net
 * Plugin URI: https://www.classicpress.net
 * Requires PHP: 5.6
 * Requires CP: 1.2
 * Update URI: https://directory.classicpress.net/wp-json/wp/v2/plugins?byslug=stats-for-cp-dir
 * -----------------------------------------------------------------------------
 * This is free software released under the terms of the General Public License,
 * version 2, or later. It is distributed WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Full
 * text of the license is available at https://www.gnu.org/licenses/gpl-2.0.txt.
 * -----------------------------------------------------------------------------
 */

namespace ClassicPress\StatsForCPDir;

if (!defined('ABSPATH')) {
	die('-1');
}

const DB_LOG_TABLE_NAME   = 'sfcpdir_logs';
const DB_STATS_TABLE_NAME = 'sfcpdir_stats';

class StatsForCPDir{

	// Time (in SQL format) for the plugin to be considered installed.
	public static $db_unactive_entry = 'INTERVAL 7 DAY';

	// Time (in SQL format) for the record to be deleted.
	public static $db_old_entry = 'INTERVAL 21 DAY';

	public function __construct() {

		// Hook to Update Manager filter request.
		add_filter('cpdir_rest_search', [$this, 'log_request'], 10, 3);

		// Add Active installations column
		foreach (['plugin', 'theme'] as $item) {
			add_filter('manage_'.$item.'_posts_columns', [$this, 'active_installation_column']);
			add_action('manage_'.$item.'_posts_custom_column' , [$this, 'manage_active_installation_column'], 10, 2);
		}

		// Activation and deactivation.
		register_activation_hook(__FILE__, [$this, 'activate']);
		register_deactivation_hook(__FILE__, [$this, 'deactivate']);

		// Add a cron to clean table.
		add_action('sfcp_clean_table', [$this, 'regenerate_data']);
		if (!wp_next_scheduled('sfcp_clean_table')) {
			wp_schedule_event(time(), 'daily', 'sfcp_clean_table');
		}

	}

	public function active_installation_column($columns) {
		$columns['active_installations'] = 'Active installations';
		return $columns;
	}

	public function manage_active_installation_column($column, $post_id) {
		if ($column !== 'active_installations') {
			return;
		}
		echo number_format_i18n((int) get_post_meta($post_id, 'active_installations', true));
	}

	// Log requests to the db.
	public function log_request($slug, $user_agent, $route) {


		$identifier = preg_replace('/[^A-Za-z\-_0-9]/', '', $slug);
		$type       = basename($route);
		$site       = preg_replace('/[^A-Za-z\-_0-9]/', '', substr($user_agent, -40));
		
		if (empty($slug) || strlen($site) !== 40 || !in_array($type, ['plugins', 'themes'])) {
			return $slug;
		}


		$where = [
			'type' => $type,
			'site' => $site,
			'slug' => $identifier,
			];

		$data = [
			'type' => $type,
			'site' => $site,
			'slug' => $identifier,
			'last' => current_time('mysql', 1),
			];

		// Update the site/slug last seen time.
		global $wpdb;
		if ($wpdb->update($wpdb->prefix.DB_LOG_TABLE_NAME, $data, $where)) {
			return $slug;
		}

		// Here we hide errors that are generated by some residual duplicate calls.

		// Suppress errors and save status.
		$show_errors_status = $wpdb->suppress_errors();

		// New site/slug... insert.
		$insert_status = $wpdb->insert($wpdb->prefix.DB_LOG_TABLE_NAME, $data);

		// Log failing only if is not generated by duplicate calls.
		if ($insert_status === false) {
			$error = $wpdb->last_error;
			if (!preg_match('/^Duplicate entry.*for key \'siteslug\'/', $error)) {
				trigger_error('Stats for ClassicPress directory failed: '.$error);
			}
		}

		// Restore errors status.
		$wpdb->suppress_errors($show_errors_status);

		// Return unchanged.
		return $slug;
	}
	// Delete old entries.
	public static function regenerate_data() {
	
		global $wpdb;
		$wpdb->query('DELETE FROM '.$wpdb->prefix.DB_LOG_TABLE_NAME.' WHERE last < NOW() - '.self::$db_old_entry);
		$wpdb->query('TRUNCATE '.$wpdb->prefix.DB_STATS_TABLE_NAME);
		$wpdb->query('INSERT INTO '.$wpdb->prefix.DB_STATS_TABLE_NAME.' SELECT type, slug, count(*) as count FROM '.$wpdb->prefix.DB_LOG_TABLE_NAME.' WHERE last > NOW() - '.self::$db_unactive_entry.' GROUP BY type, slug');		

		$result = $wpdb->get_results('SELECT * FROM '.$wpdb->prefix.DB_STATS_TABLE_NAME, ARRAY_A);
		foreach ($result as $item) {

			$post = new \WP_Query( [
				'post_type'      => rtrim($item['type'], 's'),
				'posts_per_page' => -1,
				'meta_query'     => [
					'relation' => 'AND',
					[
						'key'     => 'slug',
						'value'   => $item['slug'],
						'compare' => '=',
					],
				],
			]);
	
			if ($post->post_count === 0) {
				continue;
			}
			
			if ($post->post_count >1) {
				trigger_error('Duplicate slug in '.$item['type'].': '.$slug.'.');
			}
			
			$post->the_post();
			$post_id = get_the_ID();
			update_post_meta($post_id, 'active_installations', $item['count']);

		}

	}

	// Activation hook.
	public function activate() {

		// Create or update database structure.
		global $wpdb;
		require_once(ABSPATH.'wp-admin/includes/upgrade.php');

		$table_name = $wpdb->prefix.DB_LOG_TABLE_NAME;
		$wpdb_collate = $wpdb->collate;
		$sql =
			"CREATE TABLE {$table_name} (
			site CHAR(128),
			type CHAR(10),
			slug VARCHAR(100),
			last DATETIME,
			UNIQUE KEY siteslug (site,slug)
			)
			COLLATE {$wpdb_collate}";
		dbDelta($sql);

		$table_name = $wpdb->prefix.DB_STATS_TABLE_NAME;
		$wpdb_collate = $wpdb->collate;
		$sql =
			"CREATE TABLE {$table_name} (
			type CHAR(10),
			slug VARCHAR(100),
			count INT
			)
			COLLATE {$wpdb_collate}";
		dbDelta($sql);

	}

	// Disable cron.
	private function disable_cron() {
		$timestamp = wp_next_scheduled('sfcp_clean_table');
		wp_unschedule_event($timestamp, 'sfcp_clean_table');
	}

	// Deactivation hook.
	public function deactivate() {
		// Unschedule cron.
		$this->disable_cron();
	}

}

// Fire up...
$sfcpdir_instance = new StatsForCPDir; // phpcs:ignore
